// Construction ERP Prisma Schema
// 건설 ERP 데이터베이스 스키마

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 1. 사용자 및 권한
// ============================================

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String   @map("password_hash")

  // 프로필
  fullName      String   @map("full_name")
  department    String?
  position      String?

  // 권한
  role          UserRole

  // 상태
  isActive      Boolean  @default(true) @map("is_active")
  lastLogin     DateTime? @map("last_login")

  // 타임스탬프
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // 관계
  createdProjects     Project[]       @relation("CreatedProjects")
  permissions         UserPermission[]
  createdJournals     AccountingJournal[] @relation("CreatedJournals")
  postedJournals      AccountingJournal[] @relation("PostedJournals")

  @@index([role])
  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  EXECUTIVE
  CFO
  PM
  STAFF
  ACCOUNTING
}

model UserPermission {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  resource    String
  action      String
  grantedAt   DateTime @default(now()) @map("granted_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resource, action])
  @@index([userId])
  @@map("user_permissions")
}

// ============================================
// 2. 프로젝트 관리
// ============================================

model Project {
  id                 String   @id @default(uuid())
  projectCode        String   @unique @map("project_code")
  projectName        String   @map("project_name")
  projectType        ProjectType @map("project_type")
  client             String
  location           String?
  description        String?  @db.Text

  // 계약 정보
  contractPrice      Decimal  @map("contract_price") @db.Decimal(15, 2)
  contractDate       DateTime @map("contract_date") @db.Date
  startDate          DateTime @map("start_date") @db.Date
  endDate            DateTime @map("end_date") @db.Date
  constructionPeriod Int      @map("construction_period")

  // 상태
  status             ProjectStatus @default(PLANNED)
  progressRate       Decimal  @default(0) @map("progress_rate") @db.Decimal(5, 2)

  // 타임스탬프
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  createdBy          String?  @map("created_by")

  // 관계
  creator            User?    @relation("CreatedProjects", fields: [createdBy], references: [id])
  assumptions        ProjectAssumption[]
  progress           ProjectProgress[]
  cashFlows          CashFlow[]
  journals           AccountingJournal[]
  notifications      Notification[]

  @@index([projectType])
  @@index([status])
  @@index([startDate, endDate])
  @@map("projects")
}

enum ProjectType {
  REAL_ESTATE
  SIMPLE_CONTRACT
  INFRA
  ENERGY
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

model ProjectAssumption {
  id               String   @id @default(uuid())
  projectId        String   @map("project_id")

  // 수익성
  profitMargin     Decimal  @map("profit_margin") @db.Decimal(5, 4)
  costRatio        Decimal  @map("cost_ratio") @db.Decimal(5, 4)

  // 청구/수금
  periodInvoicing  Int      @map("period_invoicing")
  periodReceivable Int      @map("period_receivable")
  retentionRate    Decimal  @map("retention_rate") @db.Decimal(5, 4)
  retentionPeriod  Int      @map("retention_period")

  // 지급
  payMSubcon       Int      @map("pay_m_subcon")
  payMMaterial     Int      @map("pay_m_material")

  // S-Curve
  curveType        String   @default("s_curve_normal") @map("curve_type")

  // 유효 기간
  effectiveFrom    DateTime @map("effective_from") @db.Date
  effectiveTo      DateTime? @map("effective_to") @db.Date
  createdAt        DateTime @default(now()) @map("created_at")

  // 관계
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([effectiveFrom, effectiveTo])
  @@map("project_assumptions")
}

model ProjectProgress {
  id                String   @id @default(uuid())
  projectId         String   @map("project_id")
  month             Int
  progressDate      DateTime @map("progress_date") @db.Date

  // 진행률
  plannedRate       Decimal  @map("planned_rate") @db.Decimal(5, 4)
  actualRate        Decimal? @map("actual_rate") @db.Decimal(5, 4)
  cumulativeRate    Decimal  @map("cumulative_rate") @db.Decimal(5, 4)

  // 사업수지
  revenue           Decimal  @db.Decimal(15, 2)
  cost              Decimal  @db.Decimal(15, 2)
  profit            Decimal  @db.Decimal(15, 2)

  // 누적
  cumulativeRevenue Decimal  @map("cumulative_revenue") @db.Decimal(15, 2)
  cumulativeCost    Decimal  @map("cumulative_cost") @db.Decimal(15, 2)
  cumulativeProfit  Decimal  @map("cumulative_profit") @db.Decimal(15, 2)

  createdAt         DateTime @default(now()) @map("created_at")

  // 관계
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, month])
  @@index([projectId, month])
  @@map("project_progress")
}

// ============================================
// 3. 재무 관리
// ============================================

model CashFlow {
  id                  String   @id @default(uuid())
  projectId           String   @map("project_id")
  month               Int
  flowDate            DateTime @map("flow_date") @db.Date

  // 현금 유입
  invoiceAmount       Decimal  @default(0) @map("invoice_amount") @db.Decimal(15, 2)
  receivedAmount      Decimal  @default(0) @map("received_amount") @db.Decimal(15, 2)
  retentionReceived   Decimal  @default(0) @map("retention_received") @db.Decimal(15, 2)

  // 현금 유출
  subcontractPayment  Decimal  @default(0) @map("subcontract_payment") @db.Decimal(15, 2)
  materialPayment     Decimal  @default(0) @map("material_payment") @db.Decimal(15, 2)
  otherPayment        Decimal  @default(0) @map("other_payment") @db.Decimal(15, 2)

  // 순현금흐름
  netCashFlow         Decimal  @map("net_cash_flow") @db.Decimal(15, 2)
  cumulativeCash      Decimal  @map("cumulative_cash") @db.Decimal(15, 2)

  createdAt           DateTime @default(now()) @map("created_at")

  // 관계
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, month])
  @@index([projectId])
  @@map("cash_flows")
}

model AccountingJournal {
  id             String   @id @default(uuid())
  journalNumber  String   @unique @map("journal_number")
  journalDate    DateTime @map("journal_date") @db.Date
  projectId      String?  @map("project_id")

  // 차변
  debitAccount   String   @map("debit_account")
  debitAmount    Decimal  @map("debit_amount") @db.Decimal(15, 2)

  // 대변
  creditAccount  String   @map("credit_account")
  creditAmount   Decimal  @map("credit_amount") @db.Decimal(15, 2)

  description    String?

  // 상태
  status         JournalStatus @default(DRAFT)

  // 타임스탬프
  createdAt      DateTime @default(now()) @map("created_at")
  createdBy      String?  @map("created_by")
  postedAt       DateTime? @map("posted_at")
  postedBy       String?  @map("posted_by")

  // 관계
  project        Project? @relation(fields: [projectId], references: [id])
  creator        User?    @relation("CreatedJournals", fields: [createdBy], references: [id])
  poster         User?    @relation("PostedJournals", fields: [postedBy], references: [id])

  @@index([journalDate])
  @@index([projectId])
  @@index([status])
  @@map("accounting_journals")
}

enum JournalStatus {
  DRAFT
  POSTED
  CANCELLED
}

model FinancialStatement {
  id               String   @id @default(uuid())
  statementDate    DateTime @map("statement_date") @db.Date
  statementType    StatementType @map("statement_type")
  periodType       PeriodType @map("period_type")

  // 손익계산서
  revenue          Decimal? @db.Decimal(15, 2)
  costOfSales      Decimal? @map("cost_of_sales") @db.Decimal(15, 2)
  grossProfit      Decimal? @map("gross_profit") @db.Decimal(15, 2)
  operatingIncome  Decimal? @map("operating_income") @db.Decimal(15, 2)
  netIncome        Decimal? @map("net_income") @db.Decimal(15, 2)

  // 재무상태표
  totalAssets      Decimal? @map("total_assets") @db.Decimal(15, 2)
  totalLiabilities Decimal? @map("total_liabilities") @db.Decimal(15, 2)
  totalEquity      Decimal? @map("total_equity") @db.Decimal(15, 2)

  // JSON 상세 데이터
  detailedData     Json?    @map("detailed_data")

  createdAt        DateTime @default(now()) @map("created_at")

  @@unique([statementDate, statementType, periodType])
  @@index([statementDate])
  @@map("financial_statements")
}

enum StatementType {
  CONSOLIDATED
  SEPARATE
}

enum PeriodType {
  MONTHLY
  QUARTERLY
  ANNUAL
}

// ============================================
// 4. 수주 파이프라인
// ============================================

model ProjectPipeline {
  id                 String   @id @default(uuid())
  pipelineCode       String   @unique @map("pipeline_code")
  projectName        String   @map("project_name")
  client             String

  // 프로젝트 정보
  projectType        ProjectType @map("project_type")
  estimatedAmount    Decimal  @map("estimated_amount") @db.Decimal(15, 2)
  constructionPeriod Int      @map("construction_period")

  // 수주 정보
  biddingDate        DateTime? @map("bidding_date") @db.Date
  decisionDate       DateTime? @map("decision_date") @db.Date
  winProbability     Decimal?  @map("win_probability") @db.Decimal(5, 2)

  // 상태
  status             PipelineStatus @default(PROSPECTING)

  // 타임스탬프
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@index([status])
  @@index([biddingDate, decisionDate])
  @@map("project_pipeline")
}

enum PipelineStatus {
  PROSPECTING
  BIDDING
  NEGOTIATING
  WON
  LOST
}

// ============================================
// 5. 마스터 데이터
// ============================================

model Company {
  id              String   @id @default(uuid())
  companyCode     String   @unique @map("company_code")
  companyName     String   @map("company_name")
  companyType     CompanyType @map("company_type")

  // 사업자 정보
  businessNumber  String?  @unique @map("business_number")
  representative  String?

  // 연락처
  address         String?
  phone           String?
  email           String?

  // 재무 정보
  creditRating    String?  @map("credit_rating")
  paymentTerms    Int?     @map("payment_terms")

  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([companyType])
  @@map("companies")
}

enum CompanyType {
  CLIENT
  SUBCONTRACTOR
  SUPPLIER
}

model ChartOfAccounts {
  id                String   @id @default(uuid())
  accountCode       String   @unique @map("account_code")
  accountName       String   @map("account_name")

  // 분류
  accountType       AccountType @map("account_type")
  accountCategory   String   @map("account_category")

  // 계층
  parentAccountId   String?  @map("parent_account_id")
  level             Int

  // 속성
  isControlAccount  Boolean  @default(false) @map("is_control_account")
  isActive          Boolean  @default(true) @map("is_active")

  createdAt         DateTime @default(now()) @map("created_at")

  // 자기 참조
  parent            ChartOfAccounts? @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  children          ChartOfAccounts[] @relation("AccountHierarchy")

  @@index([accountType])
  @@index([parentAccountId])
  @@map("chart_of_accounts")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

// ============================================
// 6. AI 에이전트 시스템
// ============================================

model Agent {
  id            String        @id @default(uuid())
  name          String        @unique  // 에이전트 클래스 이름 (예: FinancialAnalystAgent)
  displayName   String        @map("display_name")
  description   String?
  capabilities  String[]      // 에이전트가 수행할 수 있는 작업들
  status        AgentStatus   @default(ACTIVE)
  config        Json          @default("{}")  // 에이전트별 설정

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  lastRunAt     DateTime?     @map("last_run_at")

  @@index([status])
  @@index([name])
  @@map("agents")
}

model AgentLog {
  id          String      @id @default(uuid())
  agentName   String      @map("agent_name")
  agentType   AgentType   @map("agent_type")
  action      String
  status      AgentStatus
  input       Json?
  output      Json?
  duration    Int?        // milliseconds
  errorMsg    String?     @map("error_msg")
  timestamp   DateTime    @default(now())

  @@index([agentName, timestamp])
  @@index([status])
  @@index([agentType])
  @@map("agent_logs")
}

model AgentTask {
  id          String      @id @default(uuid())
  agentName   String      @map("agent_name")
  agentType   AgentType   @map("agent_type")
  taskType    String      @map("task_type")
  priority    Int         @default(5)
  status      TaskStatus
  projectId   String?     @map("project_id")
  payload     Json
  result      Json?
  createdAt   DateTime    @default(now()) @map("created_at")
  startedAt   DateTime?   @map("started_at")
  completedAt DateTime?   @map("completed_at")

  @@index([status, priority])
  @@index([agentName])
  @@index([agentType])
  @@map("agent_tasks")
}

enum AgentType {
  FINANCIAL_ANALYST
  RISK_MANAGER
  SCHEDULE_OPTIMIZER
  DATA_COLLECTOR
  PATTERN_RECOGNITION
  COORDINATOR
  REPORT_GENERATOR
  ONTOLOGY_MANAGER
}

enum AgentStatus {
  ACTIVE      // 에이전트 활성 상태
  INACTIVE    // 에이전트 비활성 상태
  RUNNING     // 작업 실행 중
  SUCCESS     // 작업 성공
  FAILED      // 작업 실패
  IDLE        // 대기 중
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// ============================================
// 6. 온톨로지 및 지식 그래프
// ============================================

model OntologyEntity {
  id              String              @id @default(uuid())
  neo4jId         String?             @unique @map("neo4j_id")
  entityType      EntityType          @map("entity_type")
  name            String
  label           String
  description     String?
  properties      Json                @default("{}")

  // 메타데이터
  source          String              // 출처: legacy_db, manual, ai_agent
  confidence      Decimal             @default(1.0) @db.Decimal(3, 2) // 0.0 ~ 1.0
  verified        Boolean             @default(false)

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  createdBy       String?             @map("created_by")

  // 관계
  outgoingRelations OntologyRelation[] @relation("FromEntity")
  incomingRelations OntologyRelation[] @relation("ToEntity")
  datasets          DatasetEntity[]

  @@index([entityType])
  @@index([name])
  @@index([source])
  @@map("ontology_entities")
}

model OntologyRelation {
  id              String              @id @default(uuid())
  neo4jId         String?             @unique @map("neo4j_id")

  // 관계
  fromEntityId    String              @map("from_entity_id")
  toEntityId      String              @map("to_entity_id")
  relationType    RelationType        @map("relation_type")

  // 메타데이터
  properties      Json                @default("{}")
  weight          Decimal             @default(1.0) @db.Decimal(5, 4) // 관계 강도
  confidence      Decimal             @default(1.0) @db.Decimal(3, 2)
  verified        Boolean             @default(false)

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  // 관계 정의
  fromEntity      OntologyEntity      @relation("FromEntity", fields: [fromEntityId], references: [id], onDelete: Cascade)
  toEntity        OntologyEntity      @relation("ToEntity", fields: [toEntityId], references: [id], onDelete: Cascade)

  @@index([fromEntityId])
  @@index([toEntityId])
  @@index([relationType])
  @@map("ontology_relations")
}

model Dataset {
  id              String              @id @default(uuid())
  name            String              @unique
  description     String?
  dataType        DataType            @map("data_type")

  // 메타데이터
  schema          Json?               // JSON schema
  sampleData      Json?               @map("sample_data")
  recordCount     Int                 @default(0) @map("record_count")

  // ETL 정보
  sourceType      SourceType          @map("source_type")
  sourceConfig    Json                @map("source_config") // 연결 정보
  etlSchedule     String?             @map("etl_schedule") // cron expression
  lastSyncAt      DateTime?           @map("last_sync_at")
  syncStatus      SyncStatus          @default(PENDING) @map("sync_status")

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  // 관계
  entities        DatasetEntity[]
  etlJobs         ETLJob[]

  @@index([dataType])
  @@index([sourceType])
  @@index([syncStatus])
  @@map("datasets")
}

model DatasetEntity {
  id              String              @id @default(uuid())
  datasetId       String              @map("dataset_id")
  entityId        String              @map("entity_id")

  // 매핑 정보
  sourceField     String              @map("source_field")
  mappingRule     Json?               @map("mapping_rule")

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")

  // 관계
  dataset         Dataset             @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  entity          OntologyEntity      @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([datasetId, entityId])
  @@index([datasetId])
  @@index([entityId])
  @@map("dataset_entities")
}

model ETLJob {
  id              String              @id @default(uuid())
  datasetId       String              @map("dataset_id")
  jobType         ETLJobType          @map("job_type")
  status          ETLStatus

  // 실행 정보
  startedAt       DateTime?           @map("started_at")
  completedAt     DateTime?           @map("completed_at")
  duration        Int?                // milliseconds

  // 결과
  recordsProcessed Int               @default(0) @map("records_processed")
  recordsSuccess  Int                 @default(0) @map("records_success")
  recordsFailed   Int                 @default(0) @map("records_failed")
  errorLog        Json?               @map("error_log")

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")

  // 관계
  dataset         Dataset             @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@index([datasetId])
  @@index([status])
  @@index([startedAt])
  @@map("etl_jobs")
}

// 온톨로지 관련 Enum

enum EntityType {
  PROJECT               // 프로젝트
  ORGANIZATION          // 조직 (발주처, 협력사 등)
  PERSON                // 담당자
  LOCATION              // 위치
  DOCUMENT              // 문서
  TASK                  // 작업
  MATERIAL              // 자재
  EQUIPMENT             // 장비
  COST_ITEM             // 원가 항목
  RISK                  // 리스크
  MILESTONE             // 마일스톤
  CONTRACT              // 계약
  REGULATION            // 규제/법규
  CONCEPT               // 추상 개념
  EVENT                 // 이벤트
}

enum RelationType {
  HAS_SUBPROJECT        // 하위 프로젝트 관계
  MANAGED_BY            // 관리 관계
  LOCATED_IN            // 위치 관계
  RELATED_TO            // 일반 연관
  DEPENDS_ON            // 의존 관계
  PART_OF               // 부분 관계
  USES                  // 사용 관계
  PRODUCES              // 생산 관계
  REQUIRES              // 요구 관계
  AFFECTS               // 영향 관계
  CONTAINS              // 포함 관계
  FOLLOWS               // 후행 관계
  PRECEDES              // 선행 관계
  COLLABORATES_WITH     // 협업 관계
  SUPPLIES              // 공급 관계
  OWNS                  // 소유 관계
  REPORTS_TO            // 보고 관계
  COMPLIES_WITH         // 준수 관계
}

enum DataType {
  STRUCTURED            // 정형 데이터 (SQL)
  SEMI_STRUCTURED       // 반정형 데이터 (JSON, XML)
  UNSTRUCTURED          // 비정형 데이터 (텍스트, 이미지)
  GRAPH                 // 그래프 데이터
  TIME_SERIES           // 시계열 데이터
}

enum SourceType {
  POSTGRESQL            // PostgreSQL
  NEO4J                 // Neo4j
  REST_API              // REST API
  FILE_CSV              // CSV 파일
  FILE_EXCEL            // Excel 파일
  FILE_JSON             // JSON 파일
  MANUAL                // 수동 입력
}

enum SyncStatus {
  PENDING               // 대기 중
  IN_PROGRESS           // 진행 중
  COMPLETED             // 완료
  FAILED                // 실패
  PAUSED                // 일시정지
}

enum ETLJobType {
  FULL_SYNC             // 전체 동기화
  INCREMENTAL_SYNC      // 증분 동기화
  VALIDATION            // 검증
  TRANSFORMATION        // 변환
}

enum ETLStatus {
  QUEUED                // 대기열
  RUNNING               // 실행 중
  SUCCESS               // 성공
  FAILED                // 실패
  CANCELLED             // 취소됨
}

// ============================================
// 12. 알림 시스템
// ============================================

model Notification {
  id              String              @id @default(uuid())

  // 대상
  projectId       String?             @map("project_id")
  userId          String?             @map("user_id")

  // 알림 정보
  severity        NotificationSeverity
  category        String
  title           String
  message         String              @db.Text

  // 메트릭 데이터 (JSON)
  metrics         Json?

  // 상태
  isRead          Boolean             @default(false) @map("is_read")
  isArchived      Boolean             @default(false) @map("is_archived")
  actionRequired  Boolean             @default(false) @map("action_required")
  actionTaken     Boolean             @default(false) @map("action_taken")

  // 에이전트 정보
  agentName       String?             @map("agent_name")

  // 타임스탬프
  createdAt       DateTime            @default(now()) @map("created_at")
  readAt          DateTime?           @map("read_at")
  actionTakenAt   DateTime?           @map("action_taken_at")
  expiresAt       DateTime?           @map("expires_at")

  // 관계
  project         Project?            @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([severity])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationSeverity {
  INFO              // 정보
  WARNING           // 경고
  DANGER            // 위험
  CRITICAL          // 긴급
}

// ============================================
// 13. 에너지 운영 (발전소 관리)
// ============================================

model PowerPlant {
  id                String              @id @default(uuid())

  // 기본 정보
  plantCode         String              @unique @map("plant_code")
  plantName         String              @map("plant_name")
  plantType         PowerPlantType      @map("plant_type")

  // 위치 정보
  region            String              // 지역 (서울, 경기, 강원 등)
  address           String
  latitude          Decimal?            @db.Decimal(10, 7)
  longitude         Decimal?            @db.Decimal(10, 7)

  // 용량 정보
  capacity          Decimal             @db.Decimal(10, 2) // kW
  installedDate     DateTime            @map("installed_date") @db.Date

  // 운영 상태
  status            PlantStatus         @default(OPERATIONAL)
  lastMaintenanceAt DateTime?           @map("last_maintenance_at")
  nextMaintenanceAt DateTime?           @map("next_maintenance_at")

  // 계약 정보
  contractType      String?             @map("contract_type") // SMP, REC 등
  unitPrice         Decimal?            @map("unit_price") @db.Decimal(10, 2) // 원/kWh

  // 타임스탬프
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // 관계
  productions       EnergyProduction[]
  sales             EnergySales[]
  settlements       EnergySettlement[]
  alerts            EnergyAlert[]

  @@index([plantType])
  @@index([region])
  @@index([status])
  @@map("power_plants")
}

model EnergyProduction {
  id                String              @id @default(uuid())

  // 발전소
  plantId           String              @map("plant_id")

  // 시간 정보
  recordedAt        DateTime            @map("recorded_at")

  // 생산량 (kWh)
  production        Decimal             @db.Decimal(12, 2)

  // 환경 데이터
  temperature       Decimal?            @db.Decimal(5, 2) // 온도 (°C)
  humidity          Decimal?            @db.Decimal(5, 2) // 습도 (%)
  irradiance        Decimal?            @db.Decimal(8, 2) // 일사량 (W/m²) - 태양광
  windSpeed         Decimal?            @map("wind_speed") @db.Decimal(6, 2) // 풍속 (m/s) - 풍력

  // 효율
  efficiency        Decimal?            @db.Decimal(5, 2) // 효율 (%)

  // 타임스탬프
  createdAt         DateTime            @default(now()) @map("created_at")

  // 관계
  plant             PowerPlant          @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
  @@index([recordedAt])
  @@map("energy_productions")
}

model EnergySales {
  id                String              @id @default(uuid())

  // 발전소
  plantId           String              @map("plant_id")

  // 기간
  saleDate          DateTime            @map("sale_date") @db.Date

  // 판매량 및 금액
  soldAmount        Decimal             @map("sold_amount") @db.Decimal(12, 2) // kWh
  unitPrice         Decimal             @map("unit_price") @db.Decimal(10, 2) // 원/kWh
  totalRevenue      Decimal             @map("total_revenue") @db.Decimal(15, 2) // 원

  // 거래 유형
  marketType        String              @map("market_type") // SMP, REC, PPA 등

  // 타임스탬프
  createdAt         DateTime            @default(now()) @map("created_at")

  // 관계
  plant             PowerPlant          @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
  @@index([saleDate])
  @@map("energy_sales")
}

model EnergySettlement {
  id                String              @id @default(uuid())

  // 발전소
  plantId           String              @map("plant_id")

  // 정산 기간
  settlementMonth   DateTime            @map("settlement_month") @db.Date

  // 정산 금액
  smpRevenue        Decimal             @map("smp_revenue") @db.Decimal(15, 2) // SMP 수익
  recRevenue        Decimal             @map("rec_revenue") @db.Decimal(15, 2) // REC 수익
  incentive         Decimal             @default(0) @db.Decimal(15, 2) // 인센티브
  totalRevenue      Decimal             @map("total_revenue") @db.Decimal(15, 2) // 총 수익

  // 비용
  operationCost     Decimal             @map("operation_cost") @db.Decimal(15, 2) // 운영비
  maintenanceCost   Decimal             @map("maintenance_cost") @db.Decimal(15, 2) // 유지보수비
  totalCost         Decimal             @map("total_cost") @db.Decimal(15, 2) // 총 비용

  // 순익
  netProfit         Decimal             @map("net_profit") @db.Decimal(15, 2)

  // 정산 상태
  status            SettlementStatus    @default(PENDING)
  settledAt         DateTime?           @map("settled_at")

  // 타임스탬프
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // 관계
  plant             PowerPlant          @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
  @@index([settlementMonth])
  @@index([status])
  @@map("energy_settlements")
}

model EnergyAlert {
  id                String              @id @default(uuid())

  // 발전소
  plantId           String              @map("plant_id")

  // 알림 정보
  alertType         EnergyAlertType     @map("alert_type")
  severity          AlertSeverity
  title             String
  message           String              @db.Text

  // 관련 데이터
  metrics           Json?               // 관련 메트릭 데이터

  // 상태
  isResolved        Boolean             @default(false) @map("is_resolved")
  resolvedAt        DateTime?           @map("resolved_at")
  resolvedBy        String?             @map("resolved_by")

  // 타임스탬프
  createdAt         DateTime            @default(now()) @map("created_at")

  // 관계
  plant             PowerPlant          @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
  @@index([alertType])
  @@index([severity])
  @@index([isResolved])
  @@index([createdAt])
  @@map("energy_alerts")
}

enum PowerPlantType {
  SOLAR             // 태양광
  WIND              // 풍력
  HYDRO             // 수력
  BIOMASS           // 바이오매스
  ESS               // 에너지저장장치
  HYBRID            // 하이브리드
}

enum PlantStatus {
  OPERATIONAL       // 운영 중
  MAINTENANCE       // 정비 중
  STOPPED           // 정지
  CONSTRUCTION      // 건설 중
  DECOMMISSIONED    // 폐기
}

enum SettlementStatus {
  PENDING           // 대기 중
  PROCESSING        // 처리 중
  COMPLETED         // 완료
  FAILED            // 실패
}

enum EnergyAlertType {
  LOW_PRODUCTION    // 저생산
  EQUIPMENT_FAILURE // 설비 고장
  WEATHER_RISK      // 날씨 위험
  MAINTENANCE_DUE   // 정비 필요
  GRID_ISSUE        // 계통 문제
  PERFORMANCE_DROP  // 성능 저하
}

enum AlertSeverity {
  LOW               // 낮음
  MEDIUM            // 중간
  HIGH              // 높음
  CRITICAL          // 긴급
}
